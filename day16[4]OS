bios / basic IO system
Mbr / master boot record 
grub / grand unified bootloader
   
   
   The machine’s BIOS or boot firmware loads and runs a boot loader.

    The boot loader(“Grub” located in MBR) finds the kernel image on disk, loads it into memory, and starts it.

    The kernel initializes the devices and its drivers.

    The kernel mounts the root filesystem.

    The kernel starts a program called init with a process ID of 1. This point is the user space start.

    Init sets the rest of the system processes in motion via pre-configured runlevels.
    
    ========================
    MBR
   
   First 512 bytes of the HD

    Hard disks utilizing a MBR can have a maximum of 4 primary partitions and a max size of 2 TB each.

        Typically the MBR is located on /dev/hda or /dev/sda (/dev/vda)

        It contains information about GRUB (or LILO or other Boot Loader system)

    Other related commands:

        du - disk usage: summarize disk usage of the set of FILEs

        df - disk free : displays the amount of disk space available on the file system

        lsblk - lists information about all available - or specified - block devices
        
        ---------------------------------------------------------------------------------------------
        sudo xxd -l 512 -g 1 /dev/vda
        
        usually ends in 55 aa
        ----------------------------------------------------------------------
        dd command allows copy byte for byte 
        
        
        --------------------------------------------------
Examining the contents of the MBR with xxd

student@linux-opstation-kspt:~$ sudo xxd -l 512 -g 1 /dev/vda 

00000000: eb 63 90 00 00 00 00 00 00 00 00 00 00 00 00 00  .c.............. 
00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
_truncated_
000001b0: cd 10 ac 3c 00 75 f4 c3 fa b7 12 e6 00 00 80 00  ...<.u.......... 
000001c0: 21 02 83 0f 2e 40 00 08 00 00 df f7 ff 0f 00 00  !....@.......... 
000001d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000001f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 aa  ..............U.

	Execute xxd to hexdump 512 bytes in separated by 1 byte from /dev/vda to the screen
	The start of the hard drive shown by the code eb 63. File signature for an MBR.
	The first partition of the hard drive in 0x01be shown as 80
	The second partition entry is blank!
  
  `````````````````````````````````````````````````````````````````````````````````
  
Making a copy of the MBR with dd — Run this on Ops Station

student@linux-opstation-kspt:~$ dd if=/dev/vda of=MBRcopy bs=512 count=1 
dd: failed to open '/dev/vda': Permission denied 

student@linux-opstation-kspt:~$ sudo !! 
1+0 records in
1+0 records out
512 bytes copied, 0.00026952 s, 1.9 MB/s

student@linux-opstation-kspt:~$ file MBRcopy 
MBRcopy: DOS/MBR boot sector

	Execute dd which copies 512 bytes once from /dev/vda to a file in my current directory called MBR
	Notice, dd failed to run
	!! represents the previous command. Run it with sudo permissions.
	Execute file to read the file signature from the MBR file
	Linux knows this is a MBR because of the file signature in the first 2 bytes of the file. Its always in hex address 0x00 and 0x01 
  
 `````````````````````````````````````````````````````````````````````````````````````````````````````````````````
        
Looking at Grub configuration in Linux to find the Kernel
cat /boot/grub/grub.cfg 

Kernel 
Hard Coded
Executes /sbin/init or systemd daemon, the very first process started by the kernel with a process ID (PID) of 1
--------------------------------------------------------------------------------------------------
important directories and files
	/etc/inittab
	/etc/init.d/
	/etc/rc#.d
	/sbin/init.
	


The program /etc/init is the first process to start in SysV Linux machines. The kernel spawns /sbin/init. Its role is to initialize the system to a target run level specified in /etc/inittab.

The file /etc/inittab is a text file that contains Run Level entries as variables read by /etc/init. Entries numbered 0-6 specify a directory with scripts to start at the specified Run Level. By default the system will try to start the initdefault run level. If that fails to start, the machine will display an error, then execute the scripts in the 0(halt) run level.



The first letter K or S means Kill or Start the process that that script handles

The two digit number that follows K or S dictates the order the scripts executes


ls -l /etc/rc3.d/ 

lrwxrwxrwx 1 root root 15 Jan 31  2020 S01acpid -> ../init.d/acpid 
lrwxrwxrwx 1 root root 17 Feb  4  2020 S01anacron -> ../init.d/anacron
lrwxrwxrwx 1 root root 16 Jan 31  2020 S01apport -> ../init.d/apport
lrwxrwxrwx 1 root root 13 Jan 31  2020 S01atd -> ../init.d/atd
lrwxrwxrwx 1 root root 26 Jan 31  2020 S01console-setup.sh -> ../init.d/console-setup.sh
lrwxrwxrwx 1 root root 14 Jan 31  2020 S01cron -> ../init.d/cron
lrwxrwxrwx 1 root root 14 Jan 31  2020 S01dbus -> ../init.d/dbus
lrwxrwxrwx 1 root root 14 Feb  4  2020 S01gdm3 -> ../init.d/gdm3

ls -l /etc/rc1.d/ 

lrwxrwxrwx 1 root root 20 Feb  4  2020 K01alsa-utils -> ../init.d/alsa-utils
lrwxrwxrwx 1 root root 13 Jan 31  2020 K01atd -> ../init.d/atd
lrwxrwxrwx 1 root root 20 Jan 31  2020 K01cryptdisks -> ../init.d/cryptdisks
lrwxrwxrwx 1 root root 26 Jan 31  2020 K01cryptdisks-early -> ../init.d/cryptdisks-early
lrwxrwxrwx 1 root root 18 Jan 31  2020 K01ebtables -> ../init.d/ebtables
lrwxrwxrwx 1 root root 14 Feb  4  2020 K01gdm3 -> ../init.d/gdm3 

-> equals symbolic link to.

-------------------------------------------------------------------------------
systemd

Instead of runlevels, uses 'targets' that point to other dependencies based on the features of the environment desired

    ‘default.target’ is essentially the default runlevel (equivalent to id:5:initdefault in /etc/inittab). Use ‘systemctl get-default’ to find it, and ‘systemctl set-default’ to change it.

‘systemctl list-dependencies’ shows all the services running under default.target

Uses 'systemctl’ to manage system (backwards compatible)

    ‘systemctl status <application>.service’

    ‘systemctl list-units’

Config: /etc/systemd/ and /etc/systemd/system

--------------------------------------------------------------------------------
systemctl cat fstrim.timer -- !!!!!!
----------------------------------------------------------------------------------
all sys files for sys v initd should be in etc/init.d


check to see system type
ls -l /sbin/init
`````````````````````````````````````````````````````````````````````````````````````

/etc/profile is a script that executes whenever a user logs into an interactive shell on Linux. its functionality 
depends entirely on the version of Linux being used. Ubuntu Linux uses it to set the BASH shell prompt by executing 
/etc/bash.bashrc and execute any script named *.sh in /etc/profile.d.

Unlike /etc/environment it executes every time a user logs in interactively; 
therefore, when the file is modified logging out then in again will apply the changes.

check /etc/profile for persistance
