BIOS

BOOT Loader Phase

Kernel Phase


MBR
partition boot record on active partition is loaded

windows boot mgr manages boot process

BCD
boot configuration database


how to tell if we are running bios or UEFI on windows
systeminfo

or 

powershell

get-content C:\Windows\Panther\setupact.log | Select-String "Detected boot enviornment" 

cmd
bcdedit | findstr /i winload

smss process and its subprocesses run at highest kernel authentication

each session gets its own copy of csrss


-----------------------------------------------------------------------------------------------


    Hardware Initialization

    Loading the Boot Sector or Boot Manager

    Loading the Operating System from the Boot Sector


Why Do we care about the Boot process?

    Rootkits are a type of malware that hide themselves and other applications. They typically run in kernel mode, so they have the same privileges as the operating system and can sometimes start before it. Because traditionally, anti-malware software doesn’t load until after the kernel and boot drivers do, rootkits often exploit weaknesses in the startup process:

    Firmware Rootkits overwrite the PC’s BIOS or other hardware firmware so the rootkit can start before the OS even loads

    Bootkits replace the OS bootloader to load the bootkit before the OS

    Kernel rootkits replace a portion of the OS kernel so the rootkit can start when the OS loads

    Driver rootkits pretend to be a boot driver that the OS uses to communicate with PC

    Avenues of Attack An exposed operating system can be easily used to further Offensive goals such as pivots or compromised to steal data


2. BIOS and UEFI

BIOS and UEFI are firmware that ensure critical hardware like SATA devices (Hard Drives), Display Adapters, and SDRAM(Synchronous dynamic random-access memory) are functional then, locates the MBR(Master Boot Record) or GPT(GUID Partition Tables).

Firmware is software coded non-volatile memory devices such as:

    ROM (Read only memory)

    EPROM (Electronically Programmable Read only memory)

    EEPROM (Electronically Erasable Programmable read only memory)

    Flash memory

BIOS and UEFI do the same thing, but minor differences make UEFI more popular than BIOS in the current day. Without getting into low level specifics some of the benefits of UEFI:

    UEFI Boots much faster than BIOS systems, especially for Windows machines.

    UEFI Firmware is usually loaded into flash memory or EEPROM, making it easier to update and patch.

    UEFI offers SECURED BOOT mode which only allows verified drivers to load.

    UEFI offers drive support of up to 9 zettabytes, while BIOS only works with 2 terabytes.

References for UEFI Features


2.1 BIOS Master Boot Record

Once the BIOS checks hardware, it finds the MBR (Master Boot Record). The MBR contains Disk Partitions like /dev/sda1 or DISK 1 C:\

The partition contains code that starts the first stage of loading an Operating System, called a Boot Loader

    Boot Loaders

        Windows 2003 and older used NTLDR or New Technology Loader

        Windows 7 Service Pack 1 and newer uses bootmgr or New Technology Loader

From this point the Boot Loader takes over and starts the Operating System

​
2.2 UEFI Boot Manager

UEFI does the same hardware checks as BIOS, but instead of using the MBR it reads an EFI Partition. The EFI Partition contains UEFI Boot Managers

    Windows bootmgfw.efi or Windows Boot Manager

From this point onwards, the UEFI Boot Manager takes over and starts the Operating System


Detecting BIOS or UEFI on Windows

Q: How can I tell if my machine is running BIOS or UEFI?

Type C:\Windows\Panther\Setupact.log | findstr /i "Detected boot environment"
Get-Content C:\Windows\Panther\Setupact.log | Select-String "Detected boot environment"


    A2: Use the bcedit command

bcdedit | findstr /i winload

	winload.exe = BIOS, winload.efi = UEFI


    A: Check the GUI

Msinfo32.exe

	Look at BIOS Mode (Legacy means the system is UEFI compatible but running in BIOS mode)​


3. Windows System Initialization

This is a simplified version of the Windows Boot Process from the kernel (ntoskrnl.exe) to the execution of LogonUi.exe (the process that prompts for user interaction). It is broken into five steps.

    Loading the Operating System Kernel

    Initializing the Kernel

    Starting Subsystems

    Starting Session 0

    Starting Session 1


3.1 Loading the Operating System Kernel

On UEFI Systems

bootmgfw.efi reads a BCD (Boot Configuration Data) located in the EFI system partition to load the file winload.efi


On BIOS Systems

bootmgr or NTLDR reads the file \Boot\BCD to locate winload.exe

The purpose of both winload programs is to load basic drivers and start the next part of the Windows Boot Process - loading the Kernel.

------------------------------------
User Subsystem Session 0

Session 0 is for security and high privilege processes such as services. They are run in a separate session to isolate them from individual user’s processes.

    smss.exe installs the Win32 subsystem kernel and user mode components (win32k.sys - kernel; winsrv.dll - user; and csrss.exe - user.)

        crsrss.exe - the Client/Server Runtime Subsystem supports process / thread creation and management.

        wininit.exe marks itself as critical, initializes the Windows temp directory, loads the rest of the registry, and starts user mode scheduling. It also installs programs that require a reboot to finish the install process. It also starts:

            lsm.exe - the Local Session Manager (LSM) handles all sessions of a system (both remote desktop sessions and local system sessions.)

            lsass.exe - the Local Security Authority Subsystem (LSASS) provides user authentication services, manages the local security policy, and generates access tokens.

            services.exe the Services Control Manager (SCM) loads AutoStart services, using LSASS to authenticate if they run as something other than System.

        wininit.exe then waits for system shutdown to undo everything it started.

------------------------------------------

bcdedit


Create New partition

c:\demo>bcdedit /create {ntldr} /d "Windows XP Pro SP2 - Tiger Paw"

-Specify the Partition

c:\demo>bcdedit /set {ntldr} device partition=C:

-Specify the Path to ntldr

c:\demo>bcdedit /set {ntldr} path \ntldr

-Specify the Display Order

c:\demo>bcdedit /displayorder {ntldr} /addfirst


{current} identifies current bootloader.
