9   Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted password: Password1234, with salt: bad4u
    Output of this command should go to the screen/standard output.
    You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.

  awk -v hh=$(openssl passwd -1 -salt bad4u Passsword1234 -F: '{OFS=":"}{$2=hh}{print}' ~/PASS/shadow.txt
-------------------------------------------------------------------------------------------------------------------------------
10  Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.
  sed -e '/\/bin\/sh/d' -e '/\/bin\/false/d'  $HOME/passwd > $HOME/PASS/passwd.txt
----------------------------------------------------------------------------------------------------------
11 Write a script that will do the following.

    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
        The default shell to `/bin/bash'
    Append the modified line to the end of the file

  find $HOME -type f -name "*.bin"  | awk -F /  -v OFS=/ '{NF--; print}' | sort -u
-------------------------------------------------------------------------------------------
12  Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
        The default shell to `/bin/bash'
    Append the modified line to the end of the file
  
  tail -n1 $1 | awk -F: -v nn=$2 -v ii=$3 '{OFS=":"}{$1=nn;$3=$4=ii;$6="/home/"nn;$NF="/bin/bash";print}' >> $1
  
  ----------------------------------------------------------------------------------------------------------------
  13  Find all executable files under the following four directories:
    /bin
    /sbin
    /usr/bin
    /usr/sbin
Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.

var=$(find /bin /sbin /usr/bin /usr/sbin -type f -executable | sort | awk 'NR==10')
md5sum $var | awk -F" " '{print $1}'


-------------------------------------------------------------------------------------------------------------------
14  Using any BASH command complete the following:
    Sort the /etc/passwd file numerically by the GID field.
    For the 10th entry in the sorted passwd file, get an md5 hash of that entryâ€™s home directory.
    Output ONLY the MD5 hash of the directory's name to standard output.
    
    var=$(sort -n -t: -k 4  /etc/passwd | awk 'NR==10' | awk -F: '{print $6}')
    echo "$var" | md5sum | awk -F" " '{print $1}'
    
------------------------------------------------------------------------------------------------------------------
15  Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
    Your script should:
        Exclude file type named pipes. These can break your script.
        Redirect STDOUT and STDERR to separate files.
        Determine the count of files hashed in the file with hashes.
        Determine the count of unsuccessfully hashed directories.
        Have both counts output to the screen with an appropriate title for each count.

    find /bin /etc /var -maxdepth 3 ! -type p -exec md5sum {} >outputs 2>error \;
    A=$(wc -l outputs | awk '{print $1}')
    B=$(grep -c "Is a directory" error)

    if [[ "$A" ]];
    then 
    echo "Successfully Hashed Files: $A" ;
    echo "Unsuccessfully Hashed Directories: $B" ;
    else 
    echo "none"; -maxdepth 3
    fi
 -------------------------------------------------------------------------------------------------------------------
 16    Design a script that detects the existence of directory: $HOME/.ssh
    Upon successful detection, copies any and all files from within the directory $HOME/.ssh to directory $HOME/SSH and produce no output. You will need to create $HOME/SSH.
   
if [ -d $HOME/.ssh ]; then
mkdir $HOME/SSH | cp -r $HOME/.ssh $HOME/SSH
else 
    echo "Run ssh-keygen"
fi
------------------------------------------------------------------------------------------------------------------------
17 Write a script that determines your default gateway ip address. Assign that address to a variable using command substitution.
    NOTE: Networking on the CTFd is limited for security reasons. ip route and route are emulated. Use either of those with no arguments/switches.
   Have your script determine the absolute path of the ping application. Assign the absolute path to a variable using command substitution. HINT: man which
   Have your script send six ping packets to your default gateway, utilizing the path discovered in the previous step, and assign the response to a variable using command substitution.
   Evalu     

Pseudo Example:

A=$(command_1)
B=$(command_2)
C=$($A command_3 $B)
if [[ "$" <condition> "$" ]]; then
   echo "successful";
else
   echo "failure";
fi 
 `````````````````````````````````````````````````````
 GW=$(ip route | awk '/default/{print $3}')
CMD=$(which ping)
RESULT=$($CMD -c6 $GW)
echo $RESULT | egrep "6 received" >/dev/null
if [[ $? -eq 0 ]]; then
echo "successful"
else
echo "failure"
fi
 
 -----------------------------------------------------------------------------------------------------------------
 18 Create the following files in a new directory you create $HOME/ZIP:
    file1 will contain the md5sum of the text 12345
    file2 will contain the md5sum of the text 6789
    file3 will contain the md5sum of the text abcdef
Create a zip file containing the three files above, without being stored inside a directory in the zip file. Name the zip file $HOME/ZIP/file.zip
    HINT: "Junk" the paths
Utilize tar on $HOME/ZIP/file.zip to archive it into a file called $HOME/ZIP/file.tar.gz which should not include directories.
Use the gzip option in tar, DO NOT use a seperate gzip binary. 

cd $HOME
mkdir $HOME/ZIP
touch $HOME/ZIP/file1
echo "12345" | md5sum | awk -F" " '{print $1}' > $HOME/ZIP/file1
touch $HOME/ZIP/file2
echo "6789" | md5sum | awk -F" " '{print $1}'> $HOME/ZIP/file2
touch $HOME/ZIP/file3
echo "abcdef" | md5sum | awk -F" " '{print $1}'> $HOME/ZIP/file3
cd ZIP
zip -j file.zip file1 file2 file3
tar -cvzf file.tar.gz file.zip
````````````````````````````````````````````````````````
mkdir ~/ZIP
echo "12345" | md5sum | cut -d" "-f1 > ~/ZIP/file1
echo "6789" | md5sum | cut -d" "-f1 > ~/ZIP/file2
echo "abcdef" | md5sum | cut -d" "-f1 > ~/ZIP/file3
zip -j $HOME/ZIP/file.tar.gz -C $HOME/ZIP/file{1,2,3}
tar -czf $HOME/ZIP/file.tar.gz -C $HOME/ZIP/ file.zip
 
 
 --------------------------------------------------------------------------------------------------------------------
19     Utilize Bash looping to iteratively create each user account and their directories.

    Design a basic FOR Loop that iteratively alters the file system and user entries in a passwd-like file for new users: LARRY, CURLY, and MOE.
    Each user should have an entry in the $HOME/passwd file
    The userid and groupid will be the same and can be found as the sole contents of a file with the user's name in the $HOME directory (i.e. $HOME/LARRY.txt might contain 123)
    The home directory will be a directory with the user's name located under the $HOME directory (i.e. $HOME/LARRY)
        NOTE: Do NOT use shell expansion when specifying this in the $HOME/passwd file.
    The default shell will be /bin/bash
    The other fields in the new entries should match root's entry
    Users should be created in the order specified

rootline=$(head -1 $HOME/passwd)
for x in {LARRY,CURLY,MOE}; do
myuid=$(cat $HOME/$x.txt)
mkdir $HOME/$x
echo $rootline | awk -F: -v uu=$x -v ii=$myuid 'BEGIN{OFS=":"}{$1=uu;$3=$4=ii;$6="$HOME/"uu;$NF"/bin/bash";print}' >> $HOME/passwd
done
------------------------------------------------------------------------------------------------------------------
20  Write a bash script that will find all the files in the /etc directory, and obtains the octal permission of those files. The stat command will be useful for this task.
    Depending how you go about your script, you may find writing to the local directory useful. What you must seperate out from the initial results are the octal permissions of 0-640 and those equal to and greater than 642, ie 0-640 goes to low.txt, while 642 is sent to high.txt.
    Have your script uniquely sort the contents of the two files by count, numerically-reversed, and output the results, with applicable titles, to the screen. An example of the desired output is shown below.
        NOTE: There is a blank line being printed between the two sections of the output below.
        
        
