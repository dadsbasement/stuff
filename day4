-----------------------------------------------
not too important

s = {1,2,3,4,5}
t = {6,7,8,9,10}

s.union(t)
{1,2,3,4,5,6,7,8,9,10}

s.difference(t)
{1,2,3,4,5,}

s.intersection(t)
{4,5}
------------------------------------------
romanNumerals = {'I':1, 'V':5, 'X':10, 'L':50}
>>> for key, value in romanNumerals.items():
...     print(key,value)
... 
I 1
V 5
X 10
L 50
---------------------------------------------------
another way dont understand 
for key in romanNumerals:
...     print('{} = {}'.format(key, romanNumerals[key]))
... 
I = 1
V = 5
X = 10
L = 50
-----------------------------------------------
numlist = [4,9,99,2,3]

sorted(numlist)

numlist.sort() +++creates new list++++
------------------------------------------
umlist
[1, 4, 7, 9, 11, 13, 24]
>>> sorted(numlist, reverse=True)
[24, 13, 11, 9, 7, 4, 1]
------------------------------------------
2+4+6+8....1000

result = sum([x for x in range(2,1001,2)])
>>> result
250500
-------------------------------------------
 with any given number between 0-255 the 
 code 'inverts' or subtracts 255 from it and remains in the same
 list ( this code only works with a checker or preset l variables"
 
def invert(l):
    for numbers in range(0, len(l)):
        l[numbers] = str(255 - int(l[numbers]))
    pass

this code does the same thing but appends it to a new list

def inverted(l):
    listy = []
    for numbers in range(0, len(l)):
        newlist = str(255 - int(l[numbers]))
        listy.append(newlist)
    return(listy)

   pass
   ``````````````````````````````````````````````````````````````
  return [str(255 int(numbers)) for numbers in l]
  
   this returns a new list of inverted integers without a list being named. 
   
---------------------------------------------------------
for count, value in enumerate(values, start=1): +++++++ENUMERATE USUALLY COUNTS FROM 0 UNLESS SPECIFIED)+++++++++
...     print(count, value)
... 
1 a
2 b
3 c
-------------------------------------------------------------
>>> ord('*')
42
--------------------------------------------------------------
