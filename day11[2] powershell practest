1 function q1($var1,$var2,$var3,$var4) {
    $product=$var1*$var2*$var3*$var4 
    return $product
} 
-------------------------------------------
2.function q2($arr,$rows,$cols,$key) {
    
    foreach($row in $arr){
      if($row[0] -eq $key){
        return $row[9]
        }
    }
    return -1
}
<# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
 ------------------------------------------------------------      
what i did

{
      
        $a = @()
        $bob= 0
        while($bob -gt -1){
        $bob= [int](Read-Host -Prompt "Enter number: ")
            $a += $bob
            continue
            return 
        }
        
         return $($a | measure -Maximum).Maximum
``````````````````````````````````````````````````````````


3 function q3 {

  $vals = @()
  do{
    $val = read-host
    if($val -ne -1){
        $vals += $val
    }
} until ($val -eq -1)
return $(vals | measure-object -Maximum).Maximum


<#
     In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
  
  }
  ---------------------------------------------------------------------
4  function q4($filename,$whichline) {

    $content = get-content $filename
    return $content[$whichline]



<# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
  }
  
  
  -----------------------------------------------------------------------------------------
5 function q5($path){
 Get-ChildItem -Path $path | Sort-Object -Property Name
 
 
<# Return the child items from the given path sorted
       ascending by their Name
	#>
  }
  --------------------------------------------------------------------------------------
  
6
$Sum = 0 
    Foreach ($a in $input) {

            $Sum += $a
            
                }
                return $Sum

<# Return the sum of all elements provided on the pipeline
	#>
  
  ----------------------------------------------------------------------

7 return Get-Command *-process
<# Return only those commands whose noun is process #>
--------------------------------------------------------------


8 function q8($adjective) {
   
   return "Powershell is $adjective"
   
   
<# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#> 
}
----------------------------------------------------------------------------------------------

9  
       if ($addr -as[IPAddress]){
                return $true
                }
       else{
       return $false
       }


<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
--------------------------------------------------------------------------------------

10function q10 ($filepath,$lasthash) {


$hash = get-filehash -Algorithm SHA256 $filepath
return $has.Hash -ne $lasthash


<# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
       
       
       }
