-u format for date

functions

function Install-Software { Write-Host 'I installed some software')

#editing function
function Install-Software { Write-Host "You installed some software"}
```````````````````````````````````````````````````````````````````````````
function Install-Software {
        [CmdletBinding()]
        param()

        Write-Host " You installed software version 2, Yuh!"
}

function Install-Software {
        [CmdletBinding()]
        param(
        [Parameter()]
        [string] $version
        )

        Write-Host " You installed software  version $version, Yuh!"
}

Install-Software -version 2

you installed software version 2,yuh

````````````````````````````````````````````````````````````````````````````````````````
mandatory parameters

function Install-Software {
        [CmdletBinding()]
        param(
        
        [Parameter(Mandatory)]
        [string] $version
        
        )
      Write-Host " You installed software $version, Yuh!"
}

Install-Software

cmdlet Install-Software at command pipeline position 1
Supply values for the following parameters:
version: 
2
 You installed software 2, Yuh!
 ````````````````````````````````````````````````````````````````````
 making the mandatory parameters only 1,2 for version
 
 function Install-Software {
        [CmdletBinding()]
        param(
        [Parameter(Mandatory)]
        [ValidateSet('1','2')]
        [string] $version
        )

        Write-Host " You installed software $version, Yuh!"
}
Install-Software -version 3

Install-Software : Cannot validate argument on parameter 'version'.
The argument "3" does not belong to the set "1,2"
 
``````````````````````````````````````````````````````````````````````


$computers = @("SRV1", "SRV2","SRV3")
foreach($pc in $computers) {
  install-software -Version 2 -ComputerName $pc
  }


function Install-Software {
        [CmdletBinding()]
        param(

        [Parameter(Mandatory)]
        [ValidateSet('1','2')]
        [string]$version,

        [Parameter(Mandatory, ValueFromPipeline)]
        [string]$computername
      )

        Write-Host " You installed software $version on $Computername, Yuh!"
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
ACTIVITIES 11

function triangle{
        
      [CmdletBinding()]
      param(

     [Parameter(Mandatory)]
     [int]$a,

     [Parameter(Mandatory)]
     [int]$b

     )
     $aa = $a * $a
     $bb = $b * $b
     $c = $aa + $bb
     $answer = [math]::Sqrt($c)
     Write-Host " √$aa + √$bb = $answer "
}

``````````````````````````````````````````````````````

function angles{
        
      [CmdletBinding()]
      param(

     [Parameter(Mandatory)]
     [int]$f,

     [Parameter(Mandatory)]
     [int]$g
     )
     $anser2 = $f + $g
     $bob = 180 - $anser2
     Write-Host " missing angle from $f and $g = $bob"
     }
     
     
-------------------------------------------------
function Life-Info {
        [CmdletBinding()]
        param(

        [Parameter(Mandatory)]
        [string]$firstname,

        [Parameter(Mandatory)]
        [string]$lastname,
        
        [Parameter(Mandatory)]
        [int]$age,
        
        [Parameter(Mandatory)]
        [int]$weight

      )
      $weight = $weight / 2.2

     $hashyboi = [ordered]@{ firstname = "$firstname"; lastname = "$lastname"; age = "$age"; weight = "$weight"}
     Write-Output $hashyboi 
