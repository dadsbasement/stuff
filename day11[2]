-u format for date

functions

function Install-Software { Write-Host 'I installed some software')

#editing function
function Install-Software { Write-Host "You installed some software"}
```````````````````````````````````````````````````````````````````````````
function Install-Software {
        [CmdletBinding()]
        param()

        Write-Host " You installed software version 2, Yuh!"
}

function Install-Software {
        [CmdletBinding()]
        param(
        [Parameter()]
        [string] $version
        )

        Write-Host " You installed software  version $version, Yuh!"
}

Install-Software -version 2

you installed software version 2,yuh

````````````````````````````````````````````````````````````````````````````````````````
mandatory parameters

function Install-Software {
        [CmdletBinding()]
        param(
        
        [Parameter(Mandatory)]
        [string] $version
        
        )
      Write-Host " You installed software $version, Yuh!"
}

Install-Software

cmdlet Install-Software at command pipeline position 1
Supply values for the following parameters:
version: 
2
 You installed software 2, Yuh!
 ````````````````````````````````````````````````````````````````````
 making the mandatory parameters only 1,2 for version
 
 function Install-Software {
        [CmdletBinding()]
        param(
        [Parameter(Mandatory)]
        [ValidateSet('1','2')]
        [string] $version
        )

        Write-Host " You installed software $version, Yuh!"
}
Install-Software -version 3

Install-Software : Cannot validate argument on parameter 'version'.
The argument "3" does not belong to the set "1,2"
 
``````````````````````````````````````````````````````````````````````


$computers = @("SRV1", "SRV2","SRV3")
foreach($pc in $computers) {
  install-software -Version 2 -ComputerName $pc
  }


function Install-Software {
        [CmdletBinding()]
        param(

        [Parameter(Mandatory)]
        [ValidateSet('1','2')]
        [string]$version,

        [Parameter(Mandatory, ValueFromPipeline)]
        [string]$computername
      )

        Write-Host " You installed software $version on $Computername, Yuh!"
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ACTIVITIES 11

function triangle{
        
      [CmdletBinding()]
      param(

     [Parameter(Mandatory)]
     [int]$a,

     [Parameter(Mandatory)]
     [int]$b

     )
     $aa = $a * $a
     $bb = $b * $b
     $c = $aa + $bb
     $answer = [math]::Sqrt($c)
     Write-Host " √$aa + √$bb = $answer "
}

``````````````````````````````````````````````````````

function angles{
        
      [CmdletBinding()]
      param(

     [Parameter(Mandatory)]
     [int]$f,

     [Parameter(Mandatory)]
     [int]$g
     )
     $anser2 = $f + $g
     $bob = 180 - $anser2
     Write-Host " missing angle from $f and $g = $bob"
     }
     
     
-------------------------------------------------
function Life-Info {
        [CmdletBinding()]
        param(

        [Parameter(Mandatory)]
        [string]$firstname,

        [Parameter(Mandatory)##postion=1]
        [string]$lastname,
        
        [Parameter(Mandatory)##position=2]
        [int]$age,
        
        [Parameter(Mandatory)]
        [int]$weight

      )
      $weight = $weight / 2.2

     $hashyboi = [ordered]@{ firstname = "$firstname"; lastname = "$lastname"; age = "$age"; weight = "$weight"}
   
     Write-Output $hashyboi 
     # OR 
     #return $hashyboi
     
     `````````````````````````````````````
     Function Get-OrdinalDate {
        $date = (get-date).dayofyear
        $year = (get-date).year
        write-host $year"-"$date
        }
---------------------------------------------------

Function Get-Parameter([int]$val1, $val2, $val3){
        return $val1 * $val2 *$val3
    }

    Get-Parameter 3 3 3
    
  
    
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    advanced functions
  
  
  function Install-Software {
        [CmdletBinding()]
        param(

        [Parameter(Mandatory)]
        [ValidateSet('1','2')]
        [string]$version,

        [Parameter(Mandatory, ValueFromPipeline)]
        [string]$computername
      )
      process{
        Write-Host " You installed software $version on $Computername, Yuh!"
        }
}

 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 activity last
 
 function get-multisum {
        [CmdletBinding()]
        param(

        [Parameter(Mandatory)]
        [array]$listy,

        [Parameter(Mandatory)]
        [int]$singlenumber
      )
      Begin {
              $sum=0
               }
      process{
        foreach($num in $array) {
                if($num -eq $singlenumber){
                continue
                }
                  $sum += $num
            }
       }
     }  
       End {
                $sum
                }
                
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                regex
                
     He"{0} Gigabytes per terabyte "-f (1TB /1 GB)
     "{0:N0}" -f 1000000
                
    replace
    Hello John -replace "John", "World"
    
    
    'server1,server2,server3' -replace '[,]', ';'
     replace comma to semi colon            

(ipconfig) -match 'IPv6'

-$var -join('-')

-split '(?<=\G.{2})(?=.)'
pairs of two 

format to mac address 
-split '(?<=\G[0-9a-f]{2}(?=.)' -join ':'

split hex values
-split '(?<=\G[0-9a-f]{2}(?=.)'

convert hex to decimal 
$XXXXXXXXXXXXXXXXXXXXXxxxx




how to remove whitespace.

'[    jOHN BON     DOE]' -replace '\s+', ' '

(qprocess) -replace '\s{2,}', ', ' | select -First 10


replace text 
'192.168.0.1' replace '\d{1,3}$', '255'


PS C:\Users\student>  
   $list = 'comp1', 'comp10', 'comp13'
$pattern = 'comp(\d{1,3})'
$list -replace $pattern, 'Computer$1'

Computer1 |changed from comp1
Computer10 | changed from comp10
Computer13 | changed from comp13

"256.0.0.0" -as [IPAddress]
if ("8.8.8.8" -as [IPAddress]){"8.8.8.8 is an IP"}
8.8.8.8 is an IP

if ("888.8.8.8" -as [IPAddress]){"8.8.8.8 is an IP"}else{"itsnot"}
itsnot
