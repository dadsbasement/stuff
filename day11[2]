functions

function Install-Software { Write-Host 'I installed some software')

#editing function
function Install-Software { Write-Host "You installed some software"}
```````````````````````````````````````````````````````````````````````````
function Install-Software {
        [CmdletBinding()]
        param()

        Write-Host " You installed software version 2, Yuh!"
}

function Install-Software {
        [CmdletBinding()]
        param(
        [Parameter()]
        [string] $version
        )

        Write-Host " You installed software  version $version, Yuh!"
}

Install-Software -version 2

you installed software version 2,yuh

````````````````````````````````````````````````````````````````````````````````````````
mandatory parameters

function Install-Software {
        [CmdletBinding()]
        param(
        
        [Parameter(Mandatory)]
        [string] $version
        
        )
      Write-Host " You installed software $version, Yuh!"
}

Install-Software

cmdlet Install-Software at command pipeline position 1
Supply values for the following parameters:
version: 
2
 You installed software 2, Yuh!
 ````````````````````````````````````````````````````````````````````
 making the mandatory parameters only 1,2 for version
 
 function Install-Software {
        [CmdletBinding()]
        param(
        [Parameter(Mandatory)]
        [ValidateSet('1','2')]
        [string] $version
        )

        Write-Host " You installed software $version, Yuh!"
}
Install-Software -version 3

Install-Software : Cannot validate argument on parameter 'version'.
The argument "3" does not belong to the set "1,2"
 
```````````````````````````````````````````````````````````````````````
$computers = @("SRV1", "SRV2","SRV3")
foreach($pc in $computers) {
  install-software -Version 2 -ComputerName $pc
  }
